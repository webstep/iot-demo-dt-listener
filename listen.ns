/*

listen

Scenario: Lysorgel
 - Blinker lys i forskjellige farger basert på hvilken touch-button som brukes
 - Størst effekt hvis den brukes sammen med en webside som spiller av lyd.

Scenario: Mona Lisa Alarm
 - blinker x ganger ved alarm. trigger er at en sensor får status object_present === false
 - størst effekt hvis den brukes sammen med en webside som spiller av lyd

*/
importScripts = require('./importscripts.js').importScripts;
importScripts('./apikey.ns');
let XMLHttpRequest = require('xmlhttprequest').XMLHttpRequest;

const LAMP_LYSORGEL_DURATION = 1500; // on for 0.5 seconds
const LAMP_DOOR_DURATION = 1000;
const LAMP_ALARM_DURATION = 750; // on for 0,75 second
const LAMP_ALARM_COUNTLOOP = 5; // Alarm blinking 3 times

const debug = true;
const isMalaHome = false; // if listenForEvents is runing on MacMala in MalaHome

// The ID of the DT sensors to listen for events for
const THINGSID_TOUCH_1 = 'b6oiv957rihk096jph4g';
const THINGSID_TOUCH_2 = 'b6oiv957rihk096jphh0';
const THINGSID_TOUCH_3 = 'b6oiv957rihk096jpgsg';
const THINGSID_PROX_1 = 'b6sfpst7rihg0dm4uvm0'; // ALARM
const THINGSID_PROX_2 = 'b6sfpt57rihg0dm4v0kg'; // DØR
const THINGSID_TEMP_1 = 'b6sfpst7rihg0dm4uvr0'; // TEMP - Lab Temp

const DT_API_V2_URL = 'https://api.disruptive-technologies.com/v2beta1/projects/';
const DT_API_V2_STREAM_ALL = 'devices:stream?';


let baseUrl_openhab_server = 'http://localhost:8081/rest/items/';
let LAMP_COLOR_1 = 'hue_0210_0017882ae962_12_color';
let LAMP_COLOR_2 = 'hue_0210_0017882ae962_9_color';
let LAMP_COLOR_3 = 'hue_0210_0017882ae962_10_color';

let LAMP_NOISE = LAMP_COLOR_1;

if (isMalaHome) {
    LAMP_COLOR_1 = 'KontorSpot1_Color';
    LAMP_COLOR_2 = 'KontorSpot2_Color';
    LAMP_COLOR_3 = 'KontorSpot3_Color';
    LAMP_NOISE   = 'KontorSpot1_Color';
    baseUrl_openhab_server = 'http://malabook:8081/rest/items/';
}

let isLamp1InUse = false;
let isLamp2InUse = false;
let isLamp3InUse = false;

// Some colors to use on the HSB-setting of the HUE Color lamps
// See http://colorizer.org for an explanation and to generate sample colours
// H = Hue (Color) [0,360]
// S = Saturation [0,100]
// B = Brightness [0,100]
const COLOR_GREEN = 120;
const COLOR_BLUE = 240;
const COLOR_RED = 360;
const COLOR_YELLOW = 60;
const COLOR_PINK = 300;
const COLOR_ORANGE = 30;
const COLOR_PURPLE = 270;

let EventSource = require("eventsource");
let doorIsClosed = false;

let device_ids = '' +
    'device_ids=' + THINGSID_TOUCH_1 +
    '&device_ids=' + THINGSID_TOUCH_2 +
    '&device_ids=' + THINGSID_TOUCH_3 +
    '&device_ids=' + THINGSID_TEMP_1 +
    '&device_ids=' + THINGSID_PROX_1 +
    '&device_ids=' + THINGSID_PROX_2;

let event_types = '' +
    'event_types=objectPresent' +
    '&event_types=touch' +
    '&event_types=temperature';

let device_types = '' +
    'device_types=proximity' +
    '&device_types=touch' +
    '&device_types=temperature';

let streamURL = DT_API_V2_URL + PROJECT_ID + '/' + DT_API_V2_STREAM_ALL + device_ids + "&" + event_types + '&' + device_types;

let es = new EventSource(streamURL, { headers: { Authorization: BASIC_AUTH } } );


es.onmessage = function (data) {
    let jsonData = JSON.parse(data['data']);
    if (debug) {
        console.log(ts() + " jsonData: ", jsonData);
    }

    let doBlinkPinkLamp = false;
    let doBlinkPurpleLamp = false;
    let doBlinkBlueLamp = false;
    let doBlinkAlarm = false;
    let doBlinkDoor = false;

    let event = jsonData.result.event;
    let event_type = event.eventType;

    if (debug) {
        //const ts = jsonData.result.timestamp;
        //console.log('TimeStamp: ' + ts + 'Checking thingId: ' + thingId + ", event_type: '" + event_type + "' ");
        //console.log('JSON-data: \n' + JSON.stringify(jsonData.result));
    }

    let thingId =  getDeviceId(event.targetName);


    if (thingId === THINGSID_TOUCH_1) {
        doBlinkPinkLamp = true;
    } else if (thingId === THINGSID_TOUCH_2) {
        doBlinkPurpleLamp = true;
    } else if (thingId === THINGSID_TOUCH_3) {
        doBlinkBlueLamp = true;

    } else if (thingId === THINGSID_PROX_1) {
        if ('PRESENT' === event.data.objectPresent.state) {
            if (debug) {
                console.log(ts() + ' No alarm as long as object_present === TRUE');
            }
        } else {
            if (debug) {
                console.log('object_present is NOT_PRESENT' + event.data.objectPresent.state);
            }
            doBlinkAlarm = true;
        }

    } else if (thingId === THINGSID_PROX_2) {
        if ('PRESENT' === event.data.objectPresent.state) {
            // object_present TRUE
            if (doorIsClosed) {
                // no change in status
            } else {
                // door is being closed
                doorIsClosed = true;
            }
        } else {
            // NOT_PRESENT
            if (doorIsClosed) {
                // door is being opened
                doBlinkDoor = true;
                doorIsClosed = false;
            } else {
                // No change in status
            }
        }
    }

    if (doBlinkPinkLamp) {
        blinkLamp1();
    } else if (doBlinkPurpleLamp) {
        blinkLamp2();
    } else if (doBlinkBlueLamp) {
        blinkLamp3();
    } else if (doBlinkAlarm) {
        blinkAlarmLamp();
    } else if (doBlinkDoor) {
        if (doorIsClosed) {
            blinkLamp_DoorIsClosed();
        } else {
            blinkLamp_DoorIsOpened();
        }
    } else {
        if (debug) {
            console.log(ts() + ' Nada to blink for thingId: ' + thingId + "for event '" + event_type + "' ");
        }
    }
};

es.onerror = function (e) {
    console.log(ts() + " An error occurred: ", e);
};

function blinkAlarmLamp() {
    let count = 0;
    let duration = LAMP_ALARM_DURATION;
    let maxCount = LAMP_ALARM_COUNTLOOP;
    if (debug) {
        console.log('Send command to openHab for blinking ' + LAMP_NOISE +' in color RED ' + maxCount + ' times for ' + duration + ' second');
    }
    if (isLamp1InUse) {
        if (debug) {
            console.log(ts() + ' LAMP_NOISE is in use');
        }
        return;
    }
    isLamp1InUse = true;
    alarmRecursive(LAMP_NOISE, COLOR_RED, maxCount, count, duration);
}

function alarmRecursive(hueId, color, maxCount, count, duration) {
    setTimeout(() => {
        if (count >= maxCount) {
            isLamp1InUse = false;
            return;
        }
        count++;
        sendCommand(hueId, color + ',75,75');
        setTimeout(() => {
            sendCommand(hueId, 'OFF');
            alarmRecursive(hueId, color, maxCount, count, duration);
        }, duration);
    }, duration);
}

function blinkLamp1() {
    if (debug) {
        console.log(ts() + ' Trying to blink Lamp "' + LAMP_COLOR_1 + '"');
    }
    if (isLamp1InUse) {
        if (debug) {
            console.log(ts() + ' Lamp "' + LAMP_COLOR_1 + '" is in use, ignoring blink');
        }
        return;
    }
    isLamp1InUse = true;
    sendCommand(LAMP_COLOR_1, COLOR_PINK + ',100,75');
    setTimeout(() => {
        sendCommand(LAMP_COLOR_1, 'OFF');
        isLamp1InUse = false;
    }, LAMP_LYSORGEL_DURATION);
}

function blinkLamp2() {
    if (debug) {
        console.log(ts() + ' Trying to blink Lamp "' + LAMP_COLOR_2 + '"');
    }
    if (isLamp2InUse) {
        if (debug) {
            console.log(ts() + ' Lamp "' + LAMP_COLOR_2 + '" is in use, ignoring blink');
        }
        return;
    }
    isLamp2InUse = true;
    sendCommand(LAMP_COLOR_2, COLOR_PURPLE + ',100,75');
    setTimeout(() => {
        sendCommand(LAMP_COLOR_2, 'OFF');
        isLamp2InUse = false;
    }, LAMP_LYSORGEL_DURATION);
}

function blinkLamp3() {
    if (debug) {
        console.log(ts() + ' Trying to blink Lamp "' + LAMP_COLOR_3 + '"');
    }
    if (isLamp3InUse) {
        if (debug) {
            console.log(ts() + ' Lamp "' + LAMP_COLOR_3 + '" is in use, ignoring blink');
        }
        return;
    }
    isLamp3InUse = true;
    sendCommand(LAMP_COLOR_3, COLOR_BLUE + ',100,75');
    setTimeout(() => {
        sendCommand(LAMP_COLOR_3, 'OFF');
        isLamp3InUse = false;
    }, LAMP_LYSORGEL_DURATION);
}

function blinkLamp_DoorIsClosed() {
    if (debug) {
        console.log(ts() + ' Trying to blink Lamp "' + LAMP_COLOR_3 + '"');
    }
    if (isLamp3InUse) {
        if (debug) {
            console.log(ts() + ' Lamp "' + LAMP_COLOR_3 + '" is in use, ignoring blink');
        }
        return;
    }
    isLamp3InUse = true;
    sendCommand(LAMP_COLOR_3, COLOR_YELLOW + ',100,75');
    setTimeout(() => {
        sendCommand(LAMP_COLOR_3, 'OFF');
        isLamp3InUse = false;
    }, LAMP_DOOR_DURATION);
}

function blinkLamp_DoorIsOpened() {
    if (debug) {
        console.log(ts() + ' Trying to blink Lamp "' + LAMP_COLOR_3 + '"');
    }
    if (isLamp3InUse) {
        if (debug) {
            console.log(ts() + ' Lamp "' + LAMP_COLOR_3 + '" is in use, ignoring blink');
        }
        return;
    }
    isLamp3InUse = true;
    sendCommand(LAMP_COLOR_3, COLOR_YELLOW + ',100,75');
    setTimeout(() => {
        sendCommand(LAMP_COLOR_3, 'OFF');
        isLamp3InUse = false;
    }, LAMP_DOOR_DURATION);
}

function sendCommand(hueId, command) {
    let xhr_sendCommand = new XMLHttpRequest();
    xhr_sendCommand.withCredentials = true;
    xhr_sendCommand.addEventListener("readystatechange", function () {
        if (this.readyState === 4) {
            let res = this.responseText;
            if (debug) {
                console.log(ts() + " Response: ", res);
            }
        }
    });
    xhr_sendCommand.open('POST', baseUrl_openhab_server + hueId);
    xhr_sendCommand.setRequestHeader("accept", "application/json");
    xhr_sendCommand.send(command);
}

function ts() {
    let d = new Date();
    return date2str_NO(d);
}
function date2str_NO(d) {
    return fix2digit(d.getDate()) + '.' + fixMonth(d.getMonth()) + '.' + d.getFullYear() + ' ' +
        fix2digit(d.getHours()) + ':' + fix2digit(d.getMinutes()) + ':' + fix2digit(d.getSeconds());
}
function fixMonth(num) {
    let month = num + 1;
    if (month < 10) {
        return '0' + month;
    } else {
        return '' + month;
    }
}
function fix2digit(num) {
    if (num < 10) {
        return '0' + num;
    } else {
        return '' + num;
    }
}

function getDeviceId(deviceUrl) {
    let replaceMe = "projects/" + PROJECT_ID + "/devices/";
    return deviceUrl.replace(replaceMe, "");
}


